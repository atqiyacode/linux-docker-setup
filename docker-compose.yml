version: '3.8'

services:
  # mysql
  mysql:
    image: mysql:${MYSQL_VERSION:-latest}
    container_name: ${MYSQL_NAME:-mysql}
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-P@ssword}
      MYSQL_USER: ${MYSQL_USER:-user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - ${MYSQL_FORWARD_PORT:-3306}:3306
    volumes:
      - ${MYSQL_DATA_VOLUME:-./mysql-data}:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf

  # mysql replicate
  mysql-replicate:
    image: mysql:${MYSQL_REPLICATE_VERSION:-latest}
    container_name: ${MYSQL_REPLICATE_NAME:-mysql-replicate}
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_REPLICATE_ROOT_PASSWORD:-P@ssword}
      MYSQL_USER: ${MYSQL_REPLICATE_USER:-user}
      MYSQL_PASSWORD: ${MYSQL_REPLICATE_PASSWORD:-password}
    ports:
      - ${MYSQL_FORWARD_PORT:-3307}:3306
    volumes:
      - ${MYSQL_REPLICATE_DATA_VOLUME:-./mysql-data}:/var/lib/mysql
    depends_on:
      - mysql

  # postgresql
  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: ${POSTGRES_NAME:-postgres}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - ${POSTGRES_FORWARD_PORT:-5432}:5432
    volumes:
      - ${POSTGRES_DATA_VOLUME:-./postgres-data}:/var/lib/postgresql/data
      
  # redis
  redis:
    image: redis:${REDIS_VERSION:-alpine}
    container_name: ${REDIS_NAME:-redis}
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    ports:
      - ${REDIS_FORWARD_PORT:-6379}:6379
    volumes:
      - ${REDIS_DATA_VOLUME:-./redis-data}:/data

  #mailhog
  mailhog:
    image: 42bv/mailhog:${MAILHOG_VERSION:-latest}
    container_name: ${MAILHOG_NAME:-latest}
    restart: unless-stopped
    ports:
      - ${MAILHOG_SMTP_PORT:-587}:587
      - ${MAILHOG_UI_PORT:-8025}:8025
    volumes:
      - ${MAILHOG_DATA_VOLUME:-./mailhog-data}:/srv/Maildir

  # keycloack
  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-24.0}
    container_name: ${KEYCLOAK_NAME:-keycloak}
    restart: unless-stopped
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: ${KEYCLOAK_HTTP_PORT:-7080}
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${KEYCLOAK_HTTP_PORT:-7080}/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
    command: ["start-dev", "--http-port", "${KEYCLOAK_HTTP_PORT:-7080}", "--https-port", "${KEYCLOAK_HTTPS_PORT:-7443}"]
    ports:
      - ${KEYCLOAK_HTTP_PORT:-7080}:7080
      - ${KEYCLOAK_HTTPS_PORT:-7443}:7443

  # minio s3 bucket
  minio:
    container_name: minio-s3
    restart: unless-stopped
    image: minio/minio:latest
    ports:
        - ${MINIO_FORWARD_PORT:-9000}:9000
        - ${MINIO_CONSOLE_FORWARD_PORT:-8900}:8900
    environment:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER:-root}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password}
    volumes:
        - ${MINIO_DATA_VOLUME:-./minio-data}:/data
    command: minio server /data/minio --console-address ":${MINIO_CONSOLE_FORWARD_PORT}"
    healthcheck:
        test:
            - CMD
            - curl
            - -f
            - http://0.0.0.0:${MINIO_FORWARD_PORT}/minio/health/live
        retries: 3
        timeout: 5s

  mongodb:
    image: mongo:${MONGODB_VERSION:-latest}
    container_name: ${MONGODB_NAME:-mongodb}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
    ports:
      - ${MONGODB_FORWARD_PORT:-27017}:27017
    volumes:
      - ${MONGODB_DATA_VOLUME:-./mongodb-data}:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 20s
      retries: 10
  
  mongo-express:
    image: mongo-express:${MONGO_EXPRESS_VERSION:-latest}
    container_name: ${MONGO_EXPRESS_NAME:-mongo-express}
    restart: unless-stopped
    ports:
      - ${MONGO_EXPRESS_FORWARD_PORT:-8081}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ROOT_USERNAME:-root}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_ROOT_USERNAME:-root}:${MONGODB_ROOT_PASSWORD:-password}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_BASIC_AUTH_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_BASIC_AUTH_PASSWORD:-strongpassword}
      ME_CONFIG_BASICAUTH: ${MONGO_EXPRESS_CONFIG_BASICAUTH:-false}
    volumes:
      - ${MONGO_EXPRESS_DATA_VOLUME:-./mongo-express-data}:/config

  # zookeeper kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION:-latest}
    container_name: ${ZOOKEEPER_NAME:-zookeeper}
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_NAME:-2000}
    ports:
      - ${ZOOKEEPER_CLIENT_PORT:-2181}:2181

  # kafka
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-latest}
    container_name: ${KAFKA_NAME:-kafka}
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_FORWARD_PORT:-9092}:9092
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID:-1}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT:-2181}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_FORWARD_PORT:-9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:-1}

  # kafka 
  kafka-ui:
    image: provectuslabs/kafka-ui:${KAFKA_UI_VERSION:-lates}
    container_name: ${KAFKA_UI_NAME:-kafka-ui}
    restart: unless-stopped
    ports:
      - ${KAFKA_UI_FORWARD_PORT:-8080}:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:${KAFKA_FORWARD_PORT:-9092}"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:${ZOOKEEPER_CLIENT_PORT:-2181}"
    depends_on:
      - kafka
      - zookeeper

  # debezium
  debezium:
    image: debezium/connect:${DEBEZIUM_VERSION:-latest}
    container_name: ${DEBEZIUM_NAME:-debezium}
    restart: unless-stopped
    depends_on:
      - kafka
      - postgres
      - mysql
      - zookeeper
    ports:
      - ${DEBEZIUM_FORWARD_PORT:-8083}:8083
    environment:
      BOOTSTRAP_SERVERS: kafka:${KAFKA_FORWARD_PORT:-9092}
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: /kafka/connect/debezium-connector-mysql
    volumes:
      - ./debezium-connector-mysql:/kafka/connect/debezium-debezium-connector-mysql
  
  # nginx proxy manager
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:${NGINX_PM_VERSION:-latest}
    container_name: ${NGINX_PM_NAME:-nginx-proxy-manager}
    restart: unless-stopped
    ports:
      - ${NGINX_PM_VERSION:-80}:80 # Public HTTP Port
      - ${NGINX_PM_VERSION:-443}:443 # Public HTTPS Port
      - ${NGINX_PM_VERSION:-81}:81 # Admin Web Port
      # - ${NGINX_PM_VERSION:-21}:21 # FTP
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s

    volumes:
      - ${NGINX_PM_DATA_VOLUME:-./nginx-proxy-manager-data}:/data
      - ${NGINX_PM_SSL_DATA_VOLUME:-./letsencrypt}:/etc/letsencrypt
  
  # grafana
  grafana:
    image: grafana/grafana:${GF_VERSION:-latest}
    container_name: ${GF_NAME:-grafana}
    restart: unless-stopped
    ports:
      - ${GF_FORWARD_PORT:-5000}:3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ${GF_SECURITY_ADMIN_PASSWORD:-./grafana-data}:/var/lib/grafana

  # prometheus
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: ${PROMETHEUS_NAME:-prometheus}
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_FORWARD_PORT:-9090}:9090
    volumes:
      - ${PROMETHEUS_DATA_VOLUME:-./prometheus-data}:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
  mysql-data:
  mysql-replica-data:
  postgres-data:
  redis-data:
  mailhog-data:
  minio-data:
  mongodb-data:
  mongo-express-data:
  nginx-proxy-manager-data:
  letsencrypt:
  grafana-data:
  prometheus-data:
